from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
from reportlab.lib.units import inch
from html import escape
from io import BytesIO
from datetime import datetime
import traceback


def generate_incident_report(llm_summary, intel_list, remediation, risk_score, mitre_hits):
    try:
        buffer = BytesIO()

        # Setup PDF document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            leftMargin=50,
            rightMargin=50,
            topMargin=50,
            bottomMargin=50
        )

        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name="Title", alignment=TA_CENTER, fontSize=16, spaceAfter=12))
        styles.add(ParagraphStyle(name="Header", fontSize=13, spaceBefore=10, spaceAfter=6))
        styles.add(ParagraphStyle(name="Body", fontSize=10.5, alignment=TA_JUSTIFY, leading=14))
        styles.add(ParagraphStyle(name="Mono", fontName="Courier", fontSize=9.5, leading=12))

        # Escape LLM summary
        llm_summary = escape(llm_summary or "No summary provided.")

        # Escape and format threat intel
        if not intel_list:
            intel_text = "No threat intelligence found."
        else:
            intel_text = "<br />".join([escape(i) for i in intel_list])

        # Format remediation
        if not remediation:
            remediation_paras = ["No remediation available."]
        elif isinstance(remediation, str):
            remediation_paras = [escape(p.strip()) for p in remediation.split("\n\n") if p.strip()]
        elif isinstance(remediation, list):
            remediation_paras = [escape(p.strip()) for p in remediation if p.strip()]
        else:
            remediation_paras = ["Invalid remediation format."]

        # Format MITRE
        mitre_paras = []
        if mitre_hits:
            for tid, desc in mitre_hits:
                mitre_paras.append(f"<b>{escape(tid)}</b>: {escape(desc)}")
        else:
            mitre_paras.append("No MITRE ATT&CK techniques detected.")

        # Build flow content
        flow = []

        # Header
        flow.extend([
            Paragraph("SOC AI Assistant - Incident Report", styles["Title"]),
            Paragraph(f"<i>Generated On: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>", styles["Body"]),
            Spacer(1, 12),
        ])

        # Sections
        flow.append(Paragraph("üß† Incident Summary", styles["Header"]))
        flow.append(Paragraph(llm_summary, styles["Body"]))

        flow.append(Paragraph("üì¶ Threat Intelligence", styles["Header"]))
        flow.append(Paragraph(intel_text, styles["Mono"]))

        flow.append(Paragraph("üö® Risk Score", styles["Header"]))
        flow.append(Paragraph(f"<b>Overall Risk Score:</b> {risk_score} / 10", styles["Body"]))

        flow.append(Paragraph("üõ°Ô∏è MITRE Tactics & Techniques", styles["Header"]))
        for p in mitre_paras:
            flow.append(Paragraph(p, styles["Body"]))

        flow.append(Paragraph("üßØ Remediation Recommendations", styles["Header"]))
        for para in remediation_paras:
            flow.append(Paragraph(para.replace("\n", "<br />"), styles["Body"]))

        # Footer
        flow.append(Spacer(1, 24))
        flow.append(Paragraph("<i>Generated by SOC AI Assistant | Powered by LLM & MITRE</i>", styles["Mono"]))

        # Build and return PDF
        doc.build(flow)
        buffer.seek(0)
        return buffer.read()

    except Exception as e:
        print(f"[ERROR] PDF generation failed: {e}")
        traceback.print_exc()
        return None
